{"version":3,"file":"ExecutorGroup.js","sources":["../../../src/ol/render/ExecutorGroup.js"],"sourcesContent":["/**\r\n * @module ol/render/ExecutorGroup\r\n */\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * Base class for replay groups.\r\n */\r\nclass ExecutorGroup {\r\n  /**\r\n   * @abstract\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"./ReplayType.js\").default} replayType Replay type.\r\n   * @return {import(\"./VectorContext.js\").default} Executor.\r\n   */\r\n  getExecutor(zIndex, replayType) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../extent.js\").Extent} The extent of the group.\r\n   */\r\n  getMaxExtent() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {boolean} group Group with previous executor\r\n   * @return {Array<*>} The resulting instruction group\r\n   */\r\n  addDeclutter(group) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default ExecutorGroup;\r\n"],"names":[],"mappings":"AAAA;;;AAGA,QAAQ,QAAQ,OAAO,YAAY,CAAC;;;;;AAKpC,IAAM,aAAa;;wBAOjB,mCAAW,CAAC,MAAM,EAAE,UAAU,EAAE;EAChC,AAAE,OAAO,QAAQ,EAAE,CAAC;AACtB,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,2BAAO,GAAG;EACV,AAAE,OAAO,QAAQ,EAAE,CAAC;AACtB,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;AACH,wBAAE,qCAAY,GAAG;EACf,AAAE,OAAO,QAAQ,EAAE,CAAC;AACtB,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,qCAAY,CAAC,KAAK,EAAE;EACpB,AAAE,OAAO,QAAQ,EAAE,CAAC;AACtB,AAAE,CAAC,CACF;;AAED,eAAe,aAAa,CAAC;"}