{"version":3,"file":"Helper.js","sources":["../../../src/ol/webgl/Helper.js"],"sourcesContent":["/**\r\n * @module ol/webgl/Helper\r\n */\r\nimport {getUid} from '../util.js';\r\nimport {EXTENSIONS as WEBGL_EXTENSIONS} from '../webgl.js';\r\nimport Disposable from '../Disposable.js';\r\nimport {includes} from '../array.js';\r\nimport {listen, unlistenAll} from '../events.js';\r\nimport {clear} from '../obj.js';\r\nimport {ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER, TEXTURE_2D, TEXTURE_WRAP_S, TEXTURE_WRAP_T} from '../webgl.js';\r\nimport ContextEventType from '../webgl/ContextEventType.js';\r\nimport {\r\n  create as createTransform,\r\n  reset as resetTransform,\r\n  rotate as rotateTransform,\r\n  scale as scaleTransform,\r\n  translate as translateTransform\r\n} from '../transform';\r\nimport {create, fromTransform} from '../vec/mat4';\r\nimport WebGLPostProcessingPass from './PostProcessingPass';\r\n\r\n\r\n/**\r\n * @typedef {Object} BufferCacheEntry\r\n * @property {import(\"./Buffer.js\").default} buf\r\n * @property {WebGLBuffer} buffer\r\n */\r\n\r\n/**\r\n * Uniform names used in the default shaders.\r\n * @const\r\n * @type {Object.<string,string>}\r\n */\r\nexport const DefaultUniform = {\r\n  PROJECTION_MATRIX: 'u_projectionMatrix',\r\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\r\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\r\n  OPACITY: 'u_opacity'\r\n};\r\n\r\n/**\r\n * Attribute names used in the default shaders.\r\n * @const\r\n * @type {Object.<string,string>}\r\n */\r\nexport const DefaultAttrib = {\r\n  POSITION: 'a_position',\r\n  TEX_COORD: 'a_texCoord',\r\n  OPACITY: 'a_opacity',\r\n  ROTATE_WITH_VIEW: 'a_rotateWithView',\r\n  OFFSETS: 'a_offsets'\r\n};\r\n\r\n/**\r\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} UniformLiteralValue\r\n */\r\n\r\n/**\r\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\r\n * one of the previous types.\r\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\r\n */\r\n\r\n/**\r\n * @typedef {Object} PostProcessesOptions\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object.<string,UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object.<string,UniformValue>} [uniforms] Uniform definitions; property namesmust math the uniform\r\n * names in the provided or default shaders.\r\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @typedef {Object} UniformInternalDescription\r\n * @property {string} name Name\r\n * @property {WebGLTexture} [texture] Texture\r\n * @private\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\r\n * directly the WebGL API should not be required anymore.\r\n *\r\n * Several operations are handled by the `WebGLHelper` class:\r\n *\r\n * ### Define custom shaders and uniforms\r\n *\r\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\r\n *\r\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\r\n *   Outputs are:\r\n *\r\n *   * `gl_Position`: position of the vertex in screen space\r\n *\r\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\r\n *\r\n *   Fragment shaders are used to control the actual color of the pixels rawn on screen. Their only output is `gl_FragColor`.\r\n *\r\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\r\n *   can be changed at every frame and can be of type float, arrays of float or images.\r\n *\r\n *   Shaders must be compiled and assembled into a program like so:\r\n *   ```js\r\n *   // here we simply create two shaders and assemble them in a program which is then used\r\n *   // for subsequent rendering calls\r\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\r\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\r\n *   this.program = this.context.getProgram(fragmentShader, vertexShader);\r\n *   this.context.useProgram(this.program);\r\n *   ```\r\n *\r\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\r\n *   You can also change their value along the way like so:\r\n *   ```js\r\n *   this.context.setUniformFloatValue(DefaultUniform.OPACITY, layerState.opacity);\r\n *   ```\r\n *\r\n * ### Defining post processing passes\r\n *\r\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\r\n *   while applying special effects in screen space.\r\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\r\n *\r\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\r\n *   A post process step accepts the following options:\r\n *\r\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\r\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\r\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\r\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\r\n *\r\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\r\n *\r\n * ### Binding WebGL buffers and flushing data into them:\r\n *\r\n *   Data that must be passed to the GPU has to be transferred using `WebGLArrayBuffer` objects.\r\n *   A buffer has to be created only once, but must be bound everytime the data it holds is changed. Using `WebGLHelper.bindBuffer`\r\n *   will bind the buffer and flush the new data to the GPU.\r\n *\r\n *   For now, the `WebGLHelper` class expects {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\r\n *   ```js\r\n *   // at initialization phase\r\n *   this.verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *   this.indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *\r\n *   // at rendering phase\r\n *   this.context.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\r\n *   this.context.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n *   ```\r\n *\r\n * ### Specifying attributes\r\n *\r\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\r\n *   Attributes are used to specify these uses. Use `WebGLHelper.enableAttributeArray` and either\r\n *   the default attribute names in {@link module:ol/webgl/Helper~DefaultAttrib} or custom ones.\r\n *\r\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\r\n *   ```js\r\n *   // here we indicate that the data array has the following structure:\r\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\r\n *   let bytesPerFloat = Float32Array.BYTES_PER_ELEMENT;\r\n *   this.context.enableAttributeArray(DefaultAttrib.POSITION, 2, FLOAT, bytesPerFloat * 6, 0);\r\n *   this.context.enableAttributeArray(DefaultAttrib.OFFSETS, 2, FLOAT, bytesPerFloat * 6, bytesPerFloat * 2);\r\n *   this.context.enableAttributeArray(DefaultAttrib.TEX_COORD, 2, FLOAT, bytesPerFloat * 6, bytesPerFloat * 4);\r\n *   ```\r\n *\r\n * ### Rendering primitives\r\n *\r\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using `WebGLHelper.prepareDraw` `drawElements` and `finalizeDraw`.\r\n *   ```js\r\n *   // frame preparation step\r\n *   this.context.prepareDraw(frameState);\r\n *\r\n *   // call this for every data array that has to be rendered on screen\r\n *   this.context.drawElements(0, this.indicesBuffer.getArray().length);\r\n *\r\n *   // finalize the rendering by applying post processes\r\n *   this.context.finalizeDraw(frameState);\r\n *   ```\r\n *\r\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\r\n *\r\n *\r\n * @api\r\n */\r\nclass WebGLHelper extends Disposable {\r\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n    const options = opt_options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = document.createElement('canvas');\r\n    this.canvas_.style.position = 'absolute';\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    this.gl_ = this.canvas_.getContext('webgl');\r\n    const gl = this.getGL();\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, BufferCacheEntry>}\r\n     */\r\n    this.bufferCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, WebGLShader>}\r\n     */\r\n    this.shaderCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, WebGLProgram>}\r\n     */\r\n    this.programCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.currentProgram_ = null;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.hasOESElementIndexUint = includes(WEBGL_EXTENSIONS, 'OES_element_index_uint');\r\n\r\n    // use the OES_element_index_uint extension if available\r\n    if (this.hasOESElementIndexUint) {\r\n      gl.getExtension('OES_element_index_uint');\r\n    }\r\n\r\n    listen(this.canvas_, ContextEventType.LOST,\r\n      this.handleWebGLContextLost, this);\r\n    listen(this.canvas_, ContextEventType.RESTORED,\r\n      this.handleWebGLContextRestored, this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.projectionMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetRotateMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetScaleMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.tmpMat4_ = create();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object.<string, WebGLUniformLocation>}\r\n     */\r\n    this.uniformLocations_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object.<string, number>}\r\n     */\r\n    this.attribLocations_;\r\n\r\n    /**\r\n     * Holds info about custom uniforms used in the post processing pass.\r\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\r\n     * @type {Array<UniformInternalDescription>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n    options.uniforms && Object.keys(options.uniforms).forEach(function(name) {\r\n      this.uniforms_.push({\r\n        name: name,\r\n        value: options.uniforms[name]\r\n      });\r\n    }.bind(this));\r\n\r\n    /**\r\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\r\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\r\n     * the frame buffer logic).\r\n     * @type {Array<WebGLPostProcessingPass>}\r\n     * @private\r\n     */\r\n    this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(function(options) {\r\n      return new WebGLPostProcessingPass({\r\n        webGlContext: gl,\r\n        scaleRatio: options.scaleRatio,\r\n        vertexShader: options.vertexShader,\r\n        fragmentShader: options.fragmentShader,\r\n        uniforms: options.uniforms\r\n      });\r\n    }) : [new WebGLPostProcessingPass({webGlContext: gl})];\r\n  }\r\n\r\n  /**\r\n   * Just bind the buffer if it's in the cache. Otherwise create\r\n   * the WebGL buffer, bind it, populate it, and add an entry to\r\n   * the cache.\r\n   * TODO: improve this, the logic is unclear: we want A/ to bind a buffer and B/ to flush data in it\r\n   * @param {number} target Target.\r\n   * @param {import(\"./Buffer\").default} buf Buffer.\r\n   * @api\r\n   */\r\n  bindBuffer(target, buf) {\r\n    const gl = this.getGL();\r\n    const arr = buf.getArray();\r\n    const bufferKey = getUid(buf);\r\n    let bufferCache = this.bufferCache_[bufferKey];\r\n    if (!bufferCache) {\r\n      const buffer = gl.createBuffer();\r\n      bufferCache = this.bufferCache_[bufferKey] = {\r\n        buf: buf,\r\n        buffer: buffer\r\n      };\r\n    }\r\n    gl.bindBuffer(target, bufferCache.buffer);\r\n    let /** @type {ArrayBufferView} */ arrayBuffer;\r\n    if (target == ARRAY_BUFFER) {\r\n      arrayBuffer = new Float32Array(arr);\r\n    } else if (target == ELEMENT_ARRAY_BUFFER) {\r\n      arrayBuffer = this.hasOESElementIndexUint ?\r\n        new Uint32Array(arr) : new Uint16Array(arr);\r\n    }\r\n    gl.bufferData(target, arrayBuffer, buf.getUsage());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\r\n   */\r\n  deleteBuffer(buf) {\r\n    const gl = this.getGL();\r\n    const bufferKey = getUid(buf);\r\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\r\n    if (!gl.isContextLost()) {\r\n      gl.deleteBuffer(bufferCacheEntry.buffer);\r\n    }\r\n    delete this.bufferCache_[bufferKey];\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  disposeInternal() {\r\n    unlistenAll(this.canvas_);\r\n    const gl = this.getGL();\r\n    if (!gl.isContextLost()) {\r\n      for (const key in this.bufferCache_) {\r\n        gl.deleteBuffer(this.bufferCache_[key].buffer);\r\n      }\r\n      for (const key in this.programCache_) {\r\n        gl.deleteProgram(this.programCache_[key]);\r\n      }\r\n      for (const key in this.shaderCache_) {\r\n        gl.deleteShader(this.shaderCache_[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the buffer & set the viewport to draw.\r\n   * Post process passes will be initialized here, the first one being bound as a render target for\r\n   * subsequent draw calls.\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\r\n   * @api\r\n   */\r\n  prepareDraw(frameState) {\r\n    const gl = this.getGL();\r\n    const canvas = this.getCanvas();\r\n    const size = frameState.size;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    canvas.width = size[0] * pixelRatio;\r\n    canvas.height = size[1] * pixelRatio;\r\n    canvas.style.width = size[0] + 'px';\r\n    canvas.style.height = size[1] + 'px';\r\n\r\n    gl.useProgram(this.currentProgram_);\r\n\r\n    // loop backwards in post processes list\r\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\r\n      this.postProcessPasses_[i].init(frameState);\r\n    }\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    this.applyFrameState(frameState);\r\n    this.applyUniforms(frameState);\r\n  }\r\n\r\n  /**\r\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\r\n   * @param {number} start Start index.\r\n   * @param {number} end End index.\r\n   * @api\r\n   */\r\n  drawElements(start, end) {\r\n    const gl = this.getGL();\r\n    const elementType = this.hasOESElementIndexUint ?\r\n      gl.UNSIGNED_INT : gl.UNSIGNED_SHORT;\r\n    const elementSize = this.hasOESElementIndexUint ? 4 : 2;\r\n\r\n    const numItems = end - start;\r\n    const offsetInBytes = start * elementSize;\r\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\r\n  }\r\n\r\n  /**\r\n   * Apply the successive post process passes which will eventually render to the actual canvas.\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\r\n   * @api\r\n   */\r\n  finalizeDraw(frameState) {\r\n    // apply post processes using the next one as target\r\n    for (let i = 0; i < this.postProcessPasses_.length; i++) {\r\n      this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1] || null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   * @api\r\n   */\r\n  getCanvas() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * Get the WebGL rendering context\r\n   * @return {WebGLRenderingContext} The rendering context.\r\n   * @api\r\n   */\r\n  getGL() {\r\n    return this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  applyFrameState(frameState) {\r\n    const size = frameState.size;\r\n    const rotation = frameState.viewState.rotation;\r\n    const resolution = frameState.viewState.resolution;\r\n    const center = frameState.viewState.center;\r\n\r\n    // set the \"uniform\" values (coordinates 0,0 are the center of the view)\r\n    const projectionMatrix = resetTransform(this.projectionMatrix_);\r\n    scaleTransform(projectionMatrix, 2 / (resolution * size[0]), 2 / (resolution * size[1]));\r\n    rotateTransform(projectionMatrix, -rotation);\r\n    translateTransform(projectionMatrix, -center[0], -center[1]);\r\n\r\n    const offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\r\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\r\n\r\n    const offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\r\n    if (rotation !== 0) {\r\n      rotateTransform(offsetRotateMatrix, -rotation);\r\n    }\r\n\r\n    this.setUniformMatrixValue(DefaultUniform.PROJECTION_MATRIX, fromTransform(this.tmpMat4_, projectionMatrix));\r\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\r\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\r\n  }\r\n\r\n  /**\r\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  applyUniforms(frameState) {\r\n    const gl = this.getGL();\r\n\r\n    let value;\r\n    let textureSlot = 0;\r\n    this.uniforms_.forEach(function(uniform) {\r\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\r\n\r\n      // apply value based on type\r\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\r\n        // create a texture & put data\r\n        if (!uniform.texture) {\r\n          uniform.texture = gl.createTexture();\r\n        }\r\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\r\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        if (value instanceof ImageData) {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0,\r\n            gl.UNSIGNED_BYTE, new Uint8Array(value.data));\r\n        } else {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\r\n        }\r\n\r\n        // fill texture slots\r\n        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\r\n\r\n      } else if (Array.isArray(value)) {\r\n        switch (value.length) {\r\n          case 2:\r\n            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\r\n            return;\r\n          case 3:\r\n            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\r\n            return;\r\n          case 4:\r\n            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      } else if (typeof value === 'number') {\r\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\r\n      }\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Get shader from the cache if it's in the cache. Otherwise, create\r\n   * the WebGL shader, compile it, and add entry to cache.\r\n   * TODO: make compilation errors show up\r\n   * @param {import(\"./Shader.js\").default} shaderObject Shader object.\r\n   * @return {WebGLShader} Shader.\r\n   * @api\r\n   */\r\n  getShader(shaderObject) {\r\n    const shaderKey = getUid(shaderObject);\r\n    if (shaderKey in this.shaderCache_) {\r\n      return this.shaderCache_[shaderKey];\r\n    } else {\r\n      const gl = this.getGL();\r\n      const shader = gl.createShader(shaderObject.getType());\r\n      gl.shaderSource(shader, shaderObject.getSource());\r\n      gl.compileShader(shader);\r\n      this.shaderCache_[shaderKey] = shader;\r\n      return shader;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use a program.  If the program is already in use, this will return `false`.\r\n   * @param {WebGLProgram} program Program.\r\n   * @return {boolean} Changed.\r\n   * @api\r\n   */\r\n  useProgram(program) {\r\n    if (program == this.currentProgram_) {\r\n      return false;\r\n    } else {\r\n      const gl = this.getGL();\r\n      gl.useProgram(program);\r\n      this.currentProgram_ = program;\r\n      this.uniformLocations_ = {};\r\n      this.attribLocations_ = {};\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the program from the cache if it's in the cache. Otherwise create\r\n   * the WebGL program, attach the shaders to it, and add an entry to the\r\n   * cache.\r\n   * @param {import(\"./Fragment.js\").default} fragmentShaderObject Fragment shader.\r\n   * @param {import(\"./Vertex.js\").default} vertexShaderObject Vertex shader.\r\n   * @return {WebGLProgram} Program.\r\n   * @api\r\n   */\r\n  getProgram(fragmentShaderObject, vertexShaderObject) {\r\n    const programKey = getUid(fragmentShaderObject) + '/' + getUid(vertexShaderObject);\r\n    if (programKey in this.programCache_) {\r\n      return this.programCache_[programKey];\r\n    } else {\r\n      const gl = this.getGL();\r\n      const program = gl.createProgram();\r\n      gl.attachShader(program, this.getShader(fragmentShaderObject));\r\n      gl.attachShader(program, this.getShader(vertexShaderObject));\r\n      gl.linkProgram(program);\r\n      this.programCache_[programKey] = program;\r\n      return program;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Uniform name\r\n   * @return {WebGLUniformLocation} uniformLocation\r\n   * @api\r\n   */\r\n  getUniformLocation(name) {\r\n    if (!this.uniformLocations_[name]) {\r\n      this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\r\n    }\r\n    return this.uniformLocations_[name];\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Attribute name\r\n   * @return {number} attribLocation\r\n   * @api\r\n   */\r\n  getAttributeLocation(name) {\r\n    if (!this.attribLocations_[name]) {\r\n      this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\r\n    }\r\n    return this.attribLocations_[name];\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard float uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {number} value Value\r\n   * @api\r\n   */\r\n  setUniformFloatValue(uniform, value) {\r\n    this.getGL().uniform1f(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard matrix4 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Matrix value\r\n   * @api\r\n   */\r\n  setUniformMatrixValue(uniform, value) {\r\n    this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\r\n  }\r\n\r\n  /**\r\n   * Will set the currently bound buffer to an attribute of the shader program\r\n   * @param {string} attribName Attribute name\r\n   * @param {number} size Number of components per attributes\r\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\r\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\r\n   * @param {number} offset Offset in bytes\r\n   * @api\r\n   */\r\n  enableAttributeArray(attribName, size, type, stride, offset) {\r\n    this.getGL().enableVertexAttribArray(this.getAttributeLocation(attribName));\r\n    this.getGL().vertexAttribPointer(this.getAttributeLocation(attribName), size, type,\r\n      false, stride, offset);\r\n  }\r\n\r\n  /**\r\n   * WebGL context was lost\r\n   * @private\r\n   */\r\n  handleWebGLContextLost() {\r\n    clear(this.bufferCache_);\r\n    clear(this.shaderCache_);\r\n    clear(this.programCache_);\r\n    this.currentProgram_ = null;\r\n  }\r\n\r\n  /**\r\n   * WebGL context was restored\r\n   * @private\r\n   */\r\n  handleWebGLContextRestored() {\r\n  }\r\n\r\n  // TODO: shutdown program\r\n\r\n  /**\r\n   * TODO: these are not used and should be reworked\r\n   * @param {number=} opt_wrapS wrapS.\r\n   * @param {number=} opt_wrapT wrapT.\r\n   * @return {WebGLTexture} The texture.\r\n   */\r\n  createTextureInternal(opt_wrapS, opt_wrapT) {\r\n    const gl = this.getGL();\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\r\n    if (opt_wrapS !== undefined) {\r\n      gl.texParameteri(\r\n        TEXTURE_2D, TEXTURE_WRAP_S, opt_wrapS);\r\n    }\r\n    if (opt_wrapT !== undefined) {\r\n      gl.texParameteri(\r\n        TEXTURE_2D, TEXTURE_WRAP_T, opt_wrapT);\r\n    }\r\n\r\n    return texture;\r\n  }\r\n\r\n  /**\r\n   * TODO: these are not used and should be reworked\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number=} opt_wrapS wrapS.\r\n   * @param {number=} opt_wrapT wrapT.\r\n   * @return {WebGLTexture} The texture.\r\n   */\r\n  createEmptyTexture(width, height, opt_wrapS, opt_wrapT) {\r\n    const gl = this.getGL();\r\n    const texture = this.createTextureInternal(opt_wrapS, opt_wrapT);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    return texture;\r\n  }\r\n\r\n\r\n  /**\r\n   * TODO: these are not used and should be reworked\r\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\r\n   * @param {number=} opt_wrapS wrapS.\r\n   * @param {number=} opt_wrapT wrapT.\r\n   * @return {WebGLTexture} The texture.\r\n   */\r\n  createTexture(image, opt_wrapS, opt_wrapT) {\r\n    const gl = this.getGL();\r\n    const texture = this.createTextureInternal(opt_wrapS, opt_wrapT);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n    return texture;\r\n  }\r\n}\r\n\r\nexport default WebGLHelper;\r\n"],"names":["const","super","let","key"],"mappings":"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"}