{"version":3,"file":"BaseImage.js","sources":["../../../src/ol/layer/BaseImage.js"],"sourcesContent":["/**\r\n * @module ol/layer/BaseImage\r\n */\r\nimport Layer from './Layer.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map#addLayer}.\r\n * @property {import(\"../source/Image.js\").default} [source] Source for this layer.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent\r\n * @api\r\n */\r\nclass BaseImageLayer extends Layer {\r\n\r\n  /**\r\n   * @param {Options=} opt_options Layer options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n    super(options);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Return the associated {@link module:ol/source/Image source} of the image layer.\r\n * @function\r\n * @return {import(\"../source/Image.js\").default} Source.\r\n * @api\r\n */\r\nBaseImageLayer.prototype.getSource;\r\nexport default BaseImageLayer;\r\n"],"names":["const","super"],"mappings":"AAAA;;;AAGA,OAAO,KAAK,MAAM,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoC/B,IAAM,cAAc,GAAc;EAKhC,uBAAW,CAAC,WAAW,EAAE;IACvBA,GAAK,CAAC,OAAO,GAAG,WAAW,GAAG,WAAW,GAAG,EAAE,CAAC;IAC/CC,UAAK,OAAC,OAAO,CAAC,CAAC;;;;;GAChB;;;EAR0B,QAU5B;;;;;;;;;AASD,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC;AACnC,eAAe,cAAc,CAAC;"}